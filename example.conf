{
    // Private key:
    // Your confidentiality and data integrity depend on this key, keep it secret!
    "privateKey": "87abbe5925b716b369c6a22f7989444231b6aa0fa000d25f8a6832adf389ea40",

    // This key corresponds to the public key and ipv6 address:
    "publicKey": "7hss1rx1u1025m5z11y8m24hug5gz838rujgxfvvkbt683cu0t80.k",
    "ipv6": "fce7:73bf:bdd6:13c4:051d:8840:8fa1:d639",

    // Anyone connecting and offering these passwords on connection will be allowed.
    //
    // WARNING: Currently there is no key derivation done on the password field,
    //          DO NOT USE A PASSWORD HERE use something which is truly random and
    //          cannot be guessed.
    // Including a username in the beginning of the password string is encouraged
    // to aid in remembering which users are who.
    //
    "authorizedPasswords":
    [
        {
            // A unique string which is known to the client and server.
            "password": "6dfvp7bjq74dsgg7v1dj3x7m20"
        }

        /* These are your connection credentials
           for people connecting to you with your default password.
           adding more passwords for different users is advisable
           so that leaks can be isolated.

            "your.external.ip.goes.here:49063":
            {
                "password": "6dfvp7bjq74dsgg7v1dj3x7m20",
                "publicKey": "7hss1rx1u1025m5z11y8m24hug5gz838rujgxfvvkbt683cu0t80.k"
            }
        */
    ],

    // Settings for administering and extracting information from your router.
    // This interface provides functions which can be called through a TCP socket.
    "admin":
    {
        // Port to bind the admin RPC server to.
        "bind": "127.0.0.1:11234",

        // Password for admin RPC server.
        "password": "wncwsq6ffv2vdccm115wt7htt7"
    },




    // Interfaces to connect to the switch core.
    "interfaces":
    {
        // The interface which connects over UDP/IP based VPN tunnel.
        "UDPInterface":
        {
            // Bind to this port.
            "bind": "0.0.0.0:49063",

            // Nodes to connect to.
            "connectTo":
            {
                // Add connection credentials here to join the network
                // Ask somebody who is already connected.
            }
        }
    },

    // Configuration for the router.
    "router":
    {
        // The interface which is used for connecting to the cjdns network.
        "interface":
        {
            // The type of interface (only TUNInterface is supported for now)
            "type": "TUNInterface"

            // The name of a persistent TUN device to use.
            // This for starting cjdroute as it's own user.
            // *MOST USERS DON'T NEED THIS*
            //"tunDevice": "cjdroute0"
        }
    },

    // Tear down inactive CryptoAuth sessions after this number of seconds
    // to make them more forgiving in the event that they become desynchronized.
    "resetAfterInactivitySeconds": 30,

    // Save the pid of the running process to this file.
    // If this file cannot be opened for writing, the router will not start.
    //"pidFile": "cjdroute.pid",

    // Dropping permissions.
    "security":
    [
        // Set number of open files to zero, in Linux, this will succeed even if
        // files are already open and will not allow any files to be opened for the
        // duration of the program's operation.
        // Most security exploits require the use of files.
        "nofiles",

        // Change the user id to this user after starting up and getting resources.
        {"setuser": "nobody"}
     ],

    // Version of the config file, used internally for migration.
    "version": 1
}
